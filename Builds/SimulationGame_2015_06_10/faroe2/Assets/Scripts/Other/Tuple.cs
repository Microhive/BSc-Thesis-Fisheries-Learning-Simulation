//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;

namespace Assets.Scripts.Other
{
    public class Tuple<T1, T2>
	{
		public T1 First { get; private set; }
		public T2 Second { get; private set; }

		internal Tuple(T1 first, T2 second)
		{
			First = first;
			Second = second;
		}
		
		private static readonly IEqualityComparer<T1> Item1Comparer = EqualityComparer<T1>.Default;
		private static readonly IEqualityComparer<T2> Item2Comparer = EqualityComparer<T2>.Default;
		
		public override int GetHashCode()
		{
			var hc = 0;
			if (!object.ReferenceEquals(First, null))
				hc = Item1Comparer.GetHashCode(First);
			if (!object.ReferenceEquals(Second, null))
				hc = (hc << 3) ^ Item2Comparer.GetHashCode(Second);
			
			return hc;
		}
		
		public override bool Equals(object obj)
		{
			var other = obj as Tuple<T1, T2>;
			if (ReferenceEquals(other, null))
				return false;
			else
				return Item1Comparer.Equals(First, other.First) && Item2Comparer.Equals(Second, other.Second);
		}
	}

	public class Tuple<T1, T2, T3>
	{
		public T1 First { get; private set; }
		public T2 Second { get; private set; }
		public T3 Third { get; private set; }

		internal Tuple(T1 first, T2 second, T3 third)
		{
			First = first;
			Second = second;
			Third = third;
		}
		
		private static readonly IEqualityComparer<T1> Item1Comparer = EqualityComparer<T1>.Default;
		private static readonly IEqualityComparer<T2> Item2Comparer = EqualityComparer<T2>.Default;
		private static readonly IEqualityComparer<T3> Item3Comparer = EqualityComparer<T3>.Default;
		
		public override int GetHashCode()
		{
			var hc = 0;
			if (!object.ReferenceEquals(First, null))
				hc = Item1Comparer.GetHashCode(First);
			if (!object.ReferenceEquals(Second, null))
				hc = (hc << 3) ^ Item2Comparer.GetHashCode(Second);
			if (!object.ReferenceEquals(Second, null))
				hc = (hc << 6) ^ Item3Comparer.GetHashCode(Third);
			
			return hc;
		}
		
		public override bool Equals(object obj)
		{
			var other = obj as Tuple<T1, T2, T3>;
			if (ReferenceEquals(other, null))
				return false;
			else
				return Item1Comparer.Equals(First, other.First) && Item2Comparer.Equals(Second, other.Second) && Item3Comparer.Equals(Third, other.Third);
		}
	}

	public static class Tuple
	{
		public static Tuple<T1, T2> New<T1, T2>(T1 first, T2 second)
		{
			var tuple = new Tuple<T1, T2>(first, second);
			return tuple;
		}

		public static Tuple<T1, T2, T3> New<T1, T2, T3>(T1 first, T2 second, T3 third)
		{
			var tuple = new Tuple<T1, T2, T3>(first, second, third);
			return tuple;
		}
	}
}

